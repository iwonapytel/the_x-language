-- JPP 2018 - Interpreter, language grammar
-- Iwona Pytel, ip360730

-- Sources: https://github.com/BNFC/bnfc/blob/master/examples/C/C.cf
--          https://www.mimuw.edu.pl/~ben/Zajecia/Mrj2017/Latte/Latte.cf

-- Main program semantics
entrypoints Program, Stm, Exp;

Progr.  Program ::= [Instruction] ;

(:[]).    [Instruction] ::= Instruction;
(:).      [Instruction] ::= Instruction [Instruction];

StmInstruction.      Instruction ::= Stm ;
ExpInstruction.      Instruction ::= Exp ";" ;
DecInstruction.      Instruction ::= Dec ;

BBlock. Block ::= "{" [Instruction] "}" ;
EmptyBlock. Block ::= "{" "}" ;


-- Types
TInt.    TypeName ::= "int";
TBool.   TypeName ::= "bool";
TString. TypeName ::= "string";
TAuto.   TypeName ::= "auto" ;
TTuple.  TypeName ::= "(" [TypeName] ")" ;
separator nonempty TypeName ",";


-- Declarations
VarDec. Dec ::= TypeName [Item] ";" ;
FuncDec. Dec ::= TypeName Func ;
-- StructDec. Dec ::= Struct ";"

UninitedVar.  Item ::= Ident ;
UninitedArr.  Item ::= Ident [ArrSize] ;
InitedVar.  Item ::= Ident "=" Initializer ;
InitedArr.  Item ::= Ident [ArrSize] "=" Initializer ;
separator nonempty Item "," ;

SimpleArg. Arg ::= Ident ;
ArrArg.    Arg ::= Ident "[]" ;
separator Arg "," ;

ValArrSize.      ArrSize ::= "[" Exp "]" ;
EmptyArrSize. ArrSize ::= "[]" ;

separator nonempty ArrSize "" ;

Function. Func ::= Ident "(" [Arg] ")" Block ;
-- Struct.   Struct ::= "struct" Ident "{" [Arg] "}" ;

InitExpr.    Initializer ::= Exp2 ;
InitListOne. Initializer ::= "{" Initializers "}" ;
InitListTwo. Initializer ::= "{" Initializers "," "}" ;

AnInit.   Initializers ::= Initializer ;
MoreInit. Initializers ::= Initializers "," Initializer ;

separator Dec "" ;

-- Statements
EmptyStm.  Stm ::= ";" ;
BlockStm.  Stm ::= Block ;
-- DecStm. Stm ::= Dec ;
SelectStm. Stm ::= SelectionStm ;
ItStm.     Stm ::= IterStm ;
JStm.      Stm ::= JumpStm ;
PrintStm.  Stm ::= "print" "(" Exp ")" ";" ;
AssignStm. Stm ::= Ident "=" Exp ";" ;

IfStm.        SelectionStm ::= "if" "(" Exp ")" Stm ;
IfElseStm.    SelectionStm ::= "if" "(" Exp ")" Stm "else" Stm ;

WhileStm.   IterStm ::= "while" "(" Exp ")" Stm;
ForStm1. IterStm ::= "for" "(" Stm Exp ")" Stm ;
ForStm2.  IterStm ::= "for" "(" Stm Exp Stm ")" Stm;

-- GoToStm.   Jump_stm ::= "goto" Ident ";" ;
ContStm.   JumpStm ::= "continue" ";" ;
BreakStm. JumpStm ::= "break" ";" ;
RetStm.  JumpStm ::= "return" ";" ;
RetExpStm.  JumpStm ::= "return" Exp ";" ;

separator Stm "" ;

-- Expressions
Elor.        Exp  ::= Exp "||" Exp5;
Eland.       Exp5  ::= Exp5 "&&" Exp6;
Eeq.         Exp9  ::= Exp9 "==" Exp10;
Eneq.        Exp9  ::= Exp9 "!=" Exp10;
Elthen.      Exp10 ::= Exp10 "<" Exp11;
Egrthen.     Exp10 ::= Exp10 ">" Exp11;
Ele.         Exp10 ::= Exp10 "<=" Exp11;
Ege.         Exp10 ::= Exp10 ">=" Exp11;
Eplus.       Exp12 ::= Exp12 "+" Exp13;
Eminus.      Exp12 ::= Exp12 "-" Exp13;
Etimes.      Exp13 ::= Exp13 "*" Exp14;
Ediv.        Exp13 ::= Exp13 "/" Exp14;
Epreop.      Exp15 ::= UnaryOp Exp14;

Efunk.       Exp16 ::= Ident "(" ")";
Efunkpar.    Exp16 ::= Ident "(" [Exp] ")";
Earray.      Exp17 ::= "{" [Exp] "}";
ELitBool.    Exp18 ::= EBool;
ELitInt.     Exp18 ::= Integer;
EString.     Exp18 ::= String;
EVar.        Exp19 ::= Ident;
EArr.        Exp19 ::= Ident [Exp];


ETrue.  EBool ::= "true" ;
EFalse. EBool ::= "false";

coercions Exp 19 ;
separator Exp "," ;

-- Operators
Address.     UnaryOp ::= "&" ;
Indirection. UnaryOp ::= "*" ;
UnaryPlus.   UnaryOp ::= "+" ;
Negative.    UnaryOp ::= "-" ;
Logicalneg.  UnaryOp ::= "!" ;

-- Comments
comment "/*" "*/" ;
comment "//";
comment "#";
